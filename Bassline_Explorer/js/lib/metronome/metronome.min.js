function Metronome(t,e){this.tempo=t,this.audioContext=null,this.isPlaying=!1,this.startTime,this.lookahead=5,this.scheduleAheadTime=.1,this.nextNoteTime=0,this.notesCounter=0,this.timerWorker=null,this.noteOn=1,this.secondsPerNote=15/this.tempo,this.noteLength=e*this.secondsPerNote}MicroEvent.mixin(Metronome),Metronome.prototype.setTempo=function(t){this.tempo=t,this.secondsPerNote=30/this.tempo},Metronome.prototype.setNoteLength=function(t){this.noteLength=Math.min(t,.9)},Metronome.prototype.nextNote=function(){1===this.noteOn?(this.nextNoteTime+=this.noteLength,this.notesCounter++,256===this.notesCounter&&(this.notesCounter=0)):this.nextNoteTime+=this.secondsPerNote-this.noteLength,this.noteOn=1-this.noteOn},Metronome.prototype.scheduleNote=function(t){var e=this;1===this.noteOn?e.trigger("tick",this.notesCounter):e.trigger("note-off","Note Off")},Metronome.prototype.scheduler=function(){for(;this.nextNoteTime<this.audioContext.currentTime+this.scheduleAheadTime;)this.scheduleNote(this.nextNoteTime),this.nextNote()},Metronome.prototype.play=function(){this.nextNoteTime=this.audioContext.currentTime,this.notesCounter=0,this.timerWorker.postMessage("start"),console.log("Starting clock"),this.isPlaying=!0},Metronome.prototype.stop=function(){this.timerWorker.postMessage("stop"),console.log("Stopping clock"),this.isPlaying=!1},Metronome.prototype.init=function(){var t=this;this.audioContext=new AudioContext;this.audioContext.createOscillator();this.timerWorker=new Worker("js/lib/metronome/metronomeworker.min.js"),this.timerWorker.addEventListener("message",function(e){"tick"==e.data?t.scheduler():console.log("message: "+e.data)},!1),this.timerWorker.postMessage({interval:this.lookahead})};